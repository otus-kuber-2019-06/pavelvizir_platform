# kubernetes-vault
git checkout -b kubernetes-vault
mkdir kubernetes-vault
cd kubernetes-vault
gcloud container clusters create gke --region europe-west4-b
kubectl apply -f tiller-sa.yaml
kubectl apply -f tiller-crb.yaml
./helm init --service-account=tiller
# clone consul and vault repos with helm
git clone https://github.com/hashicorp/consul-helm.git
cp consul-helm/values.yaml consul-helm-values.yaml
./helm install --name=consul consul-helm -f consul-helm-values.yaml
git clone https://github.com/hashicorp/vault-helm.git
cp vault-helm/values.yaml vault-helm-values.yaml
# change values to mode, add ui
./helm install --name=vault vault-helm -f vault-helm-values.yaml
echo -e 'consul-helm\nhelm\nvault-helm' > .gitignore
# now check vault release status
helm status vault
LAST DEPLOYED: Fri Dec 13 17:28:25 2019
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/ConfigMap
NAME          AGE
vault-config  11m

==> v1/Pod(related)
NAME     AGE
vault-0  11m
vault-1  11m
vault-2  11m

==> v1/Service
NAME      AGE
vault     11m
vault-ui  11m

==> v1/ServiceAccount
NAME   AGE
vault  11m

==> v1/StatefulSet
NAME   AGE
vault  11m

==> v1beta1/PodDisruptionBudget
NAME   AGE
vault  11m


NOTES:

Thank you for installing HashiCorp Vault!

Now that you have deployed Vault, you should look over the docs on using
Vault with Kubernetes available here:

https://www.vaultproject.io/docs/


Your release is named vault. To learn more about the release, try:

  $ helm status vault
  $ helm get vault

# now init valut
kubectl exec -it vault-0 -- vault operator init --key-shares=1 --key-threshold=1
Unseal Key 1: ILnFVuaYPH3fJnoLbfMickokYoqyy/smQ1TPwQlcmFo=

Initial Root Token: s.6LFRpZuwwY9d3t9fVqfVIj1M

Vault initialized with 1 key shares and a key threshold of 1. Please securely
distribute the key shares printed above. When the Vault is re-sealed,
restarted, or stopped, you must supply at least 1 of these keys to unseal it
before it can start servicing requests.

Vault does not store the generated master key. Without at least 1 key to
reconstruct the master key, Vault will remain permanently sealed!

It is possible to generate new unseal keys, provided you have a quorum of
existing unseal keys shares. See "vault operator rekey" for more information.

# check status of vault
kubectl logs vault-0
kubectl exec -it vault-0 -- vault status
kubectl exec -it vault-0 env | grep VAULT_ADDR
# unseal vault
for i in $(seq 0 2); do kubectl exec -it vault-$i -- vault operator unseal 'ILnFVuaYPH3fJnoLbfMickokYoqyy/smQ1TPwQlcmFo='; done
Key                    Value
---                    -----
Seal Type              shamir
Initialized            true
Sealed                 false
Total Shares           1
Threshold              1
Version                1.3.0
Cluster Name           vault-cluster-89c489dc
Cluster ID             9822c28c-9430-32d0-9d14-2576b8ab5d5e
HA Enabled             true
HA Cluster             n/a
HA Mode                standby
Active Node Address    <none>
Key                    Value
---                    -----
Seal Type              shamir
Initialized            true
Sealed                 false
Total Shares           1
Threshold              1
Version                1.3.0
Cluster Name           vault-cluster-89c489dc
Cluster ID             9822c28c-9430-32d0-9d14-2576b8ab5d5e
HA Enabled             true
HA Cluster             https://10.16.2.7:8201
HA Mode                standby
Active Node Address    http://10.16.2.7:8200
Key                    Value
---                    -----
Seal Type              shamir
Initialized            true
Sealed                 false
Total Shares           1
Threshold              1
Version                1.3.0
Cluster Name           vault-cluster-89c489dc
Cluster ID             9822c28c-9430-32d0-9d14-2576b8ab5d5e
HA Enabled             true
HA Cluster             https://10.16.2.7:8201
HA Mode                standby
Active Node Address    http://10.16.2.7:8200

# login into vault 
kubectl exec -it vault-0 -- vault auth list
Error listing enabled authentications: Error making API request.

URL: GET http://127.0.0.1:8200/v1/sys/auth
Code: 400. Errors:

* missing client token
command terminated with exit code 2

kubectl exec -it vault-0 -- vault login 's.6LFRpZuwwY9d3t9fVqfVIj1M'
Success! You are now authenticated. The token information displayed below
is already stored in the token helper. You do NOT need to run "vault login"
again. Future Vault requests will automatically use this token.

Key                  Value
---                  -----
token                s.6LFRpZuwwY9d3t9fVqfVIj1M
token_accessor       UPoOIGT3CrskTJdgPTM0s8KQ
token_duration       ∞
token_renewable      false
token_policies       ["root"]
identity_policies    []
policies             ["root"]

kubectl exec -it vault-0 -- vault auth list
Path      Type     Accessor               Description
----      ----     --------               -----------
token/    token    auth_token_86d61e5a    token based credentials

# create secrets
kubectl exec -it vault-0 -- vault secrets enable --path=otus kv
kubectl exec -it vault-0 -- vault secrets list --detailed
kubectl exec -it vault-0 -- vault kv put otus/otus-ro/config username='otus' password='asajkjkahs'
kubectl exec -it vault-0 -- vault kv put otus/otus-rw/config username='otus' password='asajkjkahs'
kubectl exec -it vault-0 -- vault read otus/otus-ro/config
Key                 Value
---                 -----
refresh_interval    768h
password            asajkjkahs
username            otus
kubectl exec -it vault-0 -- vault kv get otus/otus-rw/config
====== Data ======
Key         Value
---         -----
password    asajkjkahs
usernam    otus

# enable kubernetes auth
kubectl exec -it vault-0 -- vault auth enable kubernetes
Success! Enabled kubernetes auth method at: kubernetes/
kubectl exec -it vault-0 -- vault auth list
Path           Type          Accessor                    Description
----           ----          --------                    -----------
kubernetes/    kubernetes    auth_kubernetes_6a2fa02e    n/a
token/         token         auth_token_86d61e5a         token based credentials

# create crb
cat vault-auth-service-account.yaml
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault-auth
    namespace: default

kubectl create serviceaccount vault-auth
kubectl apply -f vault-auth-service-account.yaml

# Prepare variables for kubernetes auth config
export VAULT_SA_NAME=$(kubectl get sa vault-auth -o jsonpath="{.secrets[*]['name']}")
export SA_JWT_TOKEN=$(kubectl get secret $VAULT_SA_NAME -o jsonpath="{.data.token}" | base64 --decode; echo)
export SA_CA_CRT=$(kubectl get secret $VAULT_SA_NAME -o jsonpath="{.data['ca\.crt']}" | base64 --decode; echo)
export K8S_HOST=$(more ~/.kube/config | grep server |awk '/http/ {print $NF}')
### alternative way
export K8S_HOST=$(kubectl cluster-info | grep 'Kubernetes master' | awk '/https/ {print $NF}' | sed 's/\x1b\[[0-9;]*m//g' )

# what's the purpose of sed 's/\x1b\[[0-9;]*m//g' ?
# That's to remove control characters and colour codes from coloured output.
# macos here, no gnu sed, so switch to 
export K8S_HOST=$(kubectl cluster-info | grep 'Kubernetes master' | awk '/https/ {print $NF}' | sed $'s,\x1b\\[[0-9;]*[a-zA-Z],,g' )


# Now write config to vault
kubectl exec -it vault-0 -- vault write auth/kubernetes/config \
token_reviewer_jwt="$SA_JWT_TOKEN" \
kubernetes_host="$K8S_HOST" \
kubernetes_ca_cert="$SA_CA_CRT"
Success! Data written to: auth/kubernetes/config

# create policy file
tee otus-policy.hcl <<EOF
path "otus/otus-ro/*" {
    capabilities = ["read", "list"]
}
path "otus/otus-rw/*" {
    capabilities = ["read", "create", "list"]
}
EOF

# create policy and role
kubectl cp otus-policy.hcl vault-0:vault/
kubectl exec -it vault-0 -- vault policy write otus-policy /vault/otus-policy.hcl
kubectl exec -it vault-0 -- vault write auth/kubernetes/role/otus  \
bound_service_account_names=vault-auth         \
bound_service_account_namespaces=default policies=otus-policy  ttl=24h

# let's check authorization
# login and get client token
kubectl run alpine --serviceaccount=vault-auth --image=alpine --tty --rm -i
apk add curl jq
VAULT_ADDR=http://vault:8200
KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
curl --request POST  --data '{"jwt": "'$KUBE_TOKEN'", "role": "otus"}' $VAULT_ADDR/v1/auth/kubernetes/login | jq
TOKEN=`curl -s --request POST  --data '{"jwt": "'$KUBE_TOKEN'", "role": "otus"}' $VAULT_ADDR/v1/auth/kubernetes/login | jq '.auth.client_token' | tr -d '"'`
# added tr to strip double

# read and right then
curl --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-ro/config
{"request_id":"f1428dd1-65ca-0b74-4c4a-ba3c3d949aa9","lease_id":"","renewable":false,"lease_duration":2764800,"data":{"password":"asajkjkahs","username":"otus"},"wrap_info":null,"warnings":null,"auth":null}
curl --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-rw/config
{"request_id":"4265ddf0-a314-8bb4-06bd-37ebeaae1835","lease_id":"","renewable":false,"lease_duration":2764800,"data":{"password":"asajkjkahs","username":"otus"},"wrap_info":null,"warnings":null,"auth":null
curl --request POST --data '{"bar": "baz"}' --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-ro/config
{"errors":["1 error occurred:\n\t* permission denied\n\n"]}
curl --request POST --data '{"bar": "baz"}' --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-rw/config
{"errors":["1 error occurred:\n\t* permission denied\n\n"]}
curl --request POST --data '{"bar": "baz"}' --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-rw/config1

# Q: why do we have errors?
# A: no rights to modify records
# let's change policy
cat otus-policy.hcl
path "otus/otus-ro/*" {
    capabilities = ["read", "list"]
}
path "otus/otus-rw/*" {
    capabilities = ["read", "create", "list", "update"]
}

kubectl cp otus-policy.hcl vault-0:vault/
kubectl exec -it vault-0 -- vault policy write otus-policy /vault/otus-policy.hcl
# repeat write
curl --request POST --data '{"bar": "baz"}' --header "X-Vault-Token:$TOKEN" $VAULT_ADDR/v1/otus/otus-rw/config
# now good
#
# Task 11
# Use case: authorization via kubernetes with example
git clone https://github.com/hashicorp/vault-guides.git
cd vault-guides/identity/vault-agent-k8s-demo
# now change configs 
# change role name in vault-agent-config.hcl
vim configs-k8s/vault-agent-config.hcl
# Uncomment this to have Agent run once (e.g. when running as an initContainer)
exit_after_auth = true
pid_file = "/home/vault/pidfile"

auto_auth {
    method "kubernetes" {
        mount_path = "auth/kubernetes"
        config = {
            role = "otus"
        }
    }

    sink "file" {
        config = {
            path = "/home/vault/.vault-token"
        }
    }
}

# change secret name in consul-template-config.hcl
vim configs-k8s/consul-template-config.hcl
vault {
  renew_token = false
  vault_agent_token_file = "/home/vault/.vault-token"
  retry {
    backoff = "1s"
  }
}

template {
  destination = "/etc/secrets/index.html"
  contents = <<EOH
  <html>
  <body>
  <p>Some secrets:</p>
  {{- with secret "otus/otus-ro/config" }}
  <ul>
  <li><pre>username: {{ .Data.username }}</pre></li>
  <li><pre>password: {{ .Data.password }}</pre></li>
  </ul>
  {{ end }}
  </body>
  </html>
  EOH
}

# now run it
# Create a ConfigMap, example-vault-agent-config
kubectl create configmap example-vault-agent-config --from-file=./configs-k8s/
# View the created ConfigMap
kubectl get configmap example-vault-agent-config -o yaml
# Finally, create vault-agent-example Pod
kubectl apply -f example-k8s-spec.yml --record
# and we get error...
2019-12-16T07:48:48.782Z [ERROR] auth.handler: error authenticating: error="Put http://10.0.2.2:8200/v1/auth/kubernetes/login: dial tcp 10.0.2.2:8200: i/o timeout" backoff=1.737779293
# now change vault address in spec and rerun
# and finally works
kubectl exec -it vault-agent-example -c consul-template -- /bin/cat "/home/vault/.vault-token"
s.zUgWRYgDFeHp6LIuvp10ZXT
kubectl cp vault-agent-example:etc/secrets/index.html index.html
cat index.html
  <html>
  <body>
  <p>Some secrets:</p>
  <ul>
  <li><pre>username: otus</pre></li>
  <li><pre>password: asajkjkahs</pre></li>
  </ul>

  </body>
  </html>


# next task
# Task 12(11? too many tasks): Create CA with helm of vault  
# turn on pki secrets
kubectl exec -it vault-0 -- vault secrets enable pki
Success! Enabled the pki secrets engine at: pki/
kubectl exec -it vault-0 -- vault secrets tune -max-lease-ttl=87600h pki
Success! Tuned the secrets engine at: pki/
kubectl exec -it vault-0 -- vault write -field=certificate pki/root/generate/internal common_name="exmaple.ru"  ttl=87600h > CA_cert.crt
# now input urls for SA and crl
kubectl exec -it vault-0 -- vault write pki/config/urls issuing_certificates="http://vault:8200/v1/pki/ca" crl_distribution_points="http://vault:8200/v1/pki/crl"
Success! Data written to: pki/config/urls
# create intermediate certificate
kubectl exec -it vault-0 -- vault secrets enable --path=pki_int pki
Success! Enabled the pki secrets engine at: pki_int/
kubectl exec -it vault-0 -- vault secrets tune -max-lease-ttl=87600h pki_int
Success! Tuned the secrets engine at: pki_int/
kubectl exec -it vault-0 -- vault write -format=json \
pki_int/intermediate/generate/internal common_name="example.ru Intermediate Authority" | jq -r '.data.csr' > pki_intermediate.csr
# now input intermediate cert into vault
kubectl cp pki_intermediate.csr vault-0:vault/ 
kubectl exec -it vault-0 -- vault write -format=json pki/root/sign-intermediate \
csr=@vault/pki_intermediate.csr format=pem_bundle ttl="43800h" |  jq -r '.data.certificate' > intermediate.cert.pem
kubectl cp intermediate.cert.pem vault-0:vault/
kubectl exec -it vault-0 -- vault write pki_int/intermediate/set-signed certificate=@vault/intermediate.cert.pem
Success! Data written to: pki_int/intermediate/set-signed
# now let's create and revoke new certs
# create role to make certs
kubectl exec -it vault-0 -- vault write pki_int/roles/example-dot-ru allowed_domains="example.ru" allow_subdomains=true   max_ttl="720h"
Success! Data written to: pki_int/roles/example-dot-ru
# create and revoke cert
kubectl exec -it vault-0 -- vault write pki_int/issue/example-dot-ru common_name="gitlab.example.ru" ttl="24h"
Key                 Value
---                 -----
ca_chain            [-----BEGIN CERTIFICATE-----
MIIDnDCCAoSgAwIBAgIUbDof6RR17sC6DT83TftPzbMdJZgwDQYJKoZIhvcNAQEL
BQAwFTETMBEGA1UEAxMKZXhtYXBsZS5ydTAeFw0xOTEyMTYxMjQxMTdaFw0yNDEy
MTQxMjQxNDdaMCwxKjAoBgNVBAMTIWV4YW1wbGUucnUgSW50ZXJtZWRpYXRlIEF1
dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPNs5JAWgygs
useLIUdSd9Cgh4KDOsj6hPXCg95sKaGbAkdJ8YCSwOFD092qvOH/A/pklUmNZEu9
dE++2QqmDHC1jQ7Yb+pnSs/9aaXoUgM8rmkP/jLwtGQygGZvQTysnfcuC9tTtI/D
CTs+jsZuhUCLRjhaR/sS9jbzrjTWLXTnllQYAuW04o1pNF/gqdqlJWXEgd35NiAi
VDjlwTlGYXb6bXqhcDtjFq4cNo863o5WyBXfXrcAiPeLx4OvbuatjQjs5AzvJN7h
yLVUNv/Qiqo9n3DvqrtyGpWT3oJDmHLrA8Wj+VKva1e5qctu8nt1enRZ0rbHA4CZ
eTfSTz3jwlECAwEAAaOBzDCByTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUw
AwEB/zAdBgNVHQ4EFgQUbBYpYimeHM0e5rn5aXdXC8jX3/YwHwYDVR0jBBgwFoAU
2Aaqapp3FS7ZSKOCxheEIA6FYF8wNwYIKwYBBQUHAQEEKzApMCcGCCsGAQUFBzAC
hhtodHRwOi8vdmF1bHQ6ODIwMC92MS9wa2kvY2EwLQYDVR0fBCYwJDAioCCgHoYc
aHR0cDovL3ZhdWx0OjgyMDAvdjEvcGtpL2NybDANBgkqhkiG9w0BAQsFAAOCAQEA
iAfRnRfsJo9MKAcj3KyW4EBh6zNy3gVzQVltfipRWleAzp+ayQ9c9fu42NejTpg0
WGGFwm6+PcxI4HHiItt2wkC6lyaq25cVPbC1BS9G5HEFFbT2sIg3+lLRO2H3gtqA
zDCNxoFGN8dgWECHBjQK6mKMESCpMlgbFQ4q3HQBSUiHVeW5UtgTTX6O7BbouJgb
VCBdR2t12AVHRCz/yyEy+gDgl4EDBklALf31cwin+6hG3W/Mdcx7mYvfLujkxifi
uHg+uPbxutP6TdCCCtMffSBF9l9U86BsP3ly/zL7Ga9TdFaix0pjFx9+IwwpFd/h
HUiVCwhcqPpbEdTmuoQvVA==
-----END CERTIFICATE-----]
certificate         -----BEGIN CERTIFICATE-----
MIIDZzCCAk+gAwIBAgIUcZ0TBO3ZIkSBoT8hHBDxKgs5/b8wDQYJKoZIhvcNAQEL
BQAwLDEqMCgGA1UEAxMhZXhhbXBsZS5ydSBJbnRlcm1lZGlhdGUgQXV0aG9yaXR5
MB4XDTE5MTIxNjEyNDYyNloXDTE5MTIxNzEyNDY1NlowHDEaMBgGA1UEAxMRZ2l0
bGFiLmV4YW1wbGUucnUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDA
gmlum0IWco1nLIKxW1+ejI9iSXqcR9FGmcP1GwsjURyMof1LyN/pGrOsaQ8OWeDw
Uk9cbYmnuRmQPW8oqkQobIMsa54Es7TkZMYeWf+0Tt2AJW4X2AkO5i89P8Zr7Q1y
Xuc2wbbaQQRjWvDE1BapGsi84WzSCppPGV8KULswnl8yuyJnrAJtOONJ0tmNr+KP
KNkqGgxlaf9qFLo1AmLjAnqXknYO9+Z6ctZ4UVJ4Hl2DSk7BtukBJAJOEI5Dt9zZ
5BTF76Knr6CRGLKf4mYOA6WGBTlRdII4ULgSHxbUwE97+COmP2KqV33Vc/0D5NdH
Meom/SDb7ns6JwKUBzpBAgMBAAGjgZAwgY0wDgYDVR0PAQH/BAQDAgOoMB0GA1Ud
JQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQU5HNUpyxila5vXMf+
Nxy0ltlzB4owHwYDVR0jBBgwFoAUbBYpYimeHM0e5rn5aXdXC8jX3/YwHAYDVR0R
BBUwE4IRZ2l0bGFiLmV4YW1wbGUucnUwDQYJKoZIhvcNAQELBQADggEBAH61zTFY
2rjJJ7Gv+EC5eo01T0oT0ureCOCjrewVDMDdrF0HW+3xINzt1B11kNdFxjMwv/Q/
JE1JgK5fvy5f6Vum9Gl2Swwb57ivv3VGrfJW8ap2ZmvHptyO1YPUX//tFQKP3OJQ
UHNIVvTtxN3NGq9PwR8Mj7ZbYqK0FiQnIYd7RT1jQ5MauytMgGOrCzSIvQRMvrak
PhVtY1ShQaf5Bug8GGzSocCVTPW2NyQdr7JyP6RdaN7+qa7OkqFl4UypKvoGQXEA
0f93QZXaSoVq2/fHXbY4vnBnQ8wQCJRJeA2HcIs4lGwPzgtr/Y2czUmlboi0mK39
aDnX83nr91BcIVw=
-----END CERTIFICATE-----
expiration          1576586816
issuing_ca          -----BEGIN CERTIFICATE-----
MIIDnDCCAoSgAwIBAgIUbDof6RR17sC6DT83TftPzbMdJZgwDQYJKoZIhvcNAQEL
BQAwFTETMBEGA1UEAxMKZXhtYXBsZS5ydTAeFw0xOTEyMTYxMjQxMTdaFw0yNDEy
MTQxMjQxNDdaMCwxKjAoBgNVBAMTIWV4YW1wbGUucnUgSW50ZXJtZWRpYXRlIEF1
dGhvcml0eTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPNs5JAWgygs
useLIUdSd9Cgh4KDOsj6hPXCg95sKaGbAkdJ8YCSwOFD092qvOH/A/pklUmNZEu9
dE++2QqmDHC1jQ7Yb+pnSs/9aaXoUgM8rmkP/jLwtGQygGZvQTysnfcuC9tTtI/D
CTs+jsZuhUCLRjhaR/sS9jbzrjTWLXTnllQYAuW04o1pNF/gqdqlJWXEgd35NiAi
VDjlwTlGYXb6bXqhcDtjFq4cNo863o5WyBXfXrcAiPeLx4OvbuatjQjs5AzvJN7h
yLVUNv/Qiqo9n3DvqrtyGpWT3oJDmHLrA8Wj+VKva1e5qctu8nt1enRZ0rbHA4CZ
eTfSTz3jwlECAwEAAaOBzDCByTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUw
AwEB/zAdBgNVHQ4EFgQUbBYpYimeHM0e5rn5aXdXC8jX3/YwHwYDVR0jBBgwFoAU
2Aaqapp3FS7ZSKOCxheEIA6FYF8wNwYIKwYBBQUHAQEEKzApMCcGCCsGAQUFBzAC
hhtodHRwOi8vdmF1bHQ6ODIwMC92MS9wa2kvY2EwLQYDVR0fBCYwJDAioCCgHoYc
aHR0cDovL3ZhdWx0OjgyMDAvdjEvcGtpL2NybDANBgkqhkiG9w0BAQsFAAOCAQEA
iAfRnRfsJo9MKAcj3KyW4EBh6zNy3gVzQVltfipRWleAzp+ayQ9c9fu42NejTpg0
WGGFwm6+PcxI4HHiItt2wkC6lyaq25cVPbC1BS9G5HEFFbT2sIg3+lLRO2H3gtqA
zDCNxoFGN8dgWECHBjQK6mKMESCpMlgbFQ4q3HQBSUiHVeW5UtgTTX6O7BbouJgb
VCBdR2t12AVHRCz/yyEy+gDgl4EDBklALf31cwin+6hG3W/Mdcx7mYvfLujkxifi
uHg+uPbxutP6TdCCCtMffSBF9l9U86BsP3ly/zL7Ga9TdFaix0pjFx9+IwwpFd/h
HUiVCwhcqPpbEdTmuoQvVA==
-----END CERTIFICATE-----
private_key         -----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEAwIJpbptCFnKNZyyCsVtfnoyPYkl6nEfRRpnD9RsLI1EcjKH9
S8jf6RqzrGkPDlng8FJPXG2Jp7kZkD1vKKpEKGyDLGueBLO05GTGHln/tE7dgCVu
F9gJDuYvPT/Ga+0Ncl7nNsG22kEEY1rwxNQWqRrIvOFs0gqaTxlfClC7MJ5fMrsi
Z6wCbTjjSdLZja/ijyjZKhoMZWn/ahS6NQJi4wJ6l5J2DvfmenLWeFFSeB5dg0pO
wbbpASQCThCOQ7fc2eQUxe+ip6+gkRiyn+JmDgOlhgU5UXSCOFC4Eh8W1MBPe/gj
pj9iqld91XP9A+TXRzHqJv0g2+57OicClAc6QQIDAQABAoIBAByN+4eNfgMIYNMR
9hzKmedRoB8LGSW/PVqEil178m39pQdzK7gnBpdz/3yuZK5TRJtBCkaCdO2s9g7A
HhHhF5ULa3WWTO0TntxV2lE8NkKPhCly496ji8xq9kzWfd8aXWk+jHtBxpafGECI
h7gaYXYZ4/aoVVTef78F22QTT4DJaycotli4ulKy8FrY1e2HgpqQfzRsVEqHNBpj
9VzyCAaJnVuYMMySvMvbsggGHxmV9SEUFk0sLZbiFrmCWrEQ3f22l2yvmBZZ1rl3
jckbT+q1vit38p325D7V4O+GGxtWphjozWtgoTWNlj3OeEI3uaO2GY73Q5gG8ZDg
3xMr47ECgYEA4B36nyG/KFgBwF95Fk7m/3+1RR6y6wbLSsCNbRx9L0hClR+IadTN
eK8sbWGd2yFqtGSkmGMQxXOz540GsSMeBTs9Us7re2hP4cUUlu/PWLyon3zBUdHN
DuYEGWl8BP5ri8cjL+FGlrf3+OI0GEh6WuPk4zXQ3uMHaL4/BIBRv6UCgYEA2+VT
obRlwOVHfSTVx2WC9verJpK5F3H2g/QiGm4mh2m5SgJp8tIGJ/3FqbH3dY49gRBK
B/ln1k+jhS7uau3JWUAYJsRZAoMVIxJSjX04LvJZSeUu/gRk5aXUbx0qyEXJQgT4
mc4ikw8VVvxXuYZnkQXYg99SlhqmTKmBqCwETW0CgYBUqx6+taoZHL50pd0CD4b3
aZDa7xEa93Mf54TGfufQUBVPbx1DFjEV8d/v5twTKBm+0vLX2z0/y0lhJgcsLp8t
zMaLHT8bXTooiiMQLsL/vC5cKm6CcadthHpx+0buQAvzP6VMdmgLkq7s6NBTiDYp
VkVnjTI+sjhfWthF5BB+PQKBgEZpKxtXQVG/2OFIfy+G4KWl7ma+iofoVPAxpw3h
gXLQtqTtGvHGsHPzvWw18S/yKN1/0sS05rvn6ktGGM+iblumu1UGgB3ezVDamBZ4
JxpZPZ/8w8xQqeIi9F/T7hQMzIHYR6YwLD/8j2+4A3sDf3wfbBHl23L2+5MGn96y
oXoNAoGAT5X7muIqiJbiUG7yfPdkRxP04mM559YXYr2H4cX1so44iGWM5ZAYx1uA
dyfMtxE9tUOQBuPAsX0bFSbluEO8CrKWXVT9K3s4TFKEvemVmszmI1BqDaoHm3jU
Hl0+06RWhH1Xh5mCDRToOq+re/a4Jajlc1zSAhb0fHjD5bYkrHw=
-----END RSA PRIVATE KEY-----
private_key_type    rsa
serial_number       71:9d:13:04:ed:d9:22:44:81:a1:3f:21:1c:10:f1:2a:0b:39:fd:bf


kubectl exec -it vault-0 -- vault write pki_int/revoke serial_number="71:9d:13:04:ed:d9:22:44:81:a1:3f:21:1c:10:f1:2a:0b:39:fd:bf"
Key                        Value
---                        -----
revocation_time            1576500518
revocation_time_rfc3339    2019-12-16T12:48:38.010849494Z

# the end
# update README.md
# update .gitignore to ignore vault-guides dir, copy all needed files etc
# delete cluster
gcloud container clusters delete gke --region europe-west4-b
The following clusters will be deleted.
 - [gke] in [europe-west4-b]

Do you want to continue (Y/n)?  y

Deleting cluster gke...done.
Deleted [https://container.googleapis.com/v1/projects/ascendant-study-247407/zones/europe-west4-b/clusters/gke].
# now commit, push, prepare PR

# Выполнено ДЗ №11

 - [*] Основное ДЗ

## В процессе сделано:
 - [Практика использования vault k8s](https://github.com/otus-kuber-2019-06/pavelvizir_platform/tree/kubernetes-vault#homework-11-aka-kubernetes-vault)

## Как запустить проект:
 - [Практика использования vault k8s](https://github.com/otus-kuber-2019-06/pavelvizir_platform/tree/kubernetes-vault#homework-11-aka-kubernetes-vault)

## Как проверить работоспособность:
 - [Практика использования vault k8s](https://github.com/otus-kuber-2019-06/pavelvizir_platform/tree/kubernetes-vault#homework-11-aka-kubernetes-vault)

## PR checklist:
 - [*] Выставлен label с номером домашнего задания
